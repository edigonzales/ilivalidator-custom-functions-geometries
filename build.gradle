plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id "de.undercouch.download" version "4.1.2"
}

apply from: "$rootDir/gradle/versioning.gradle"

group = 'io.github.sogis'

import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get("src", "main", "resources")
def themePublications = ["ch.so.agi.av.hoheitsgrenzen"]

themePublications.each { themePublication ->

    tasks.register("download_$themePublication", Download) {
        //src "https://files.geo.so.ch/" + themePublication + "/aktuell/" + themePublication + ".xtf.zip"
        src "https://s3.eu-central-1.amazonaws.com/ch.so.agi.geodata-dev/" + themePublication + ".xtf.zip"
        dest pathToTempFolder
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }

    tasks.register("unzip_$themePublication", Copy) {
        dependsOn "download_$themePublication"
        from zipTree(Paths.get(pathToTempFolder, themePublication + ".xtf.zip"))
        into file(pathToUnzipFolder)
        include "**/*.xtf"

        doLast {
            println "File unzipped to directory: " + pathToUnzipFolder
        }    
    }
}

tasks.register("prepareData") {
    description = "Aggregationstask für das Herunterladen und Entpacken der gewünschten XTF-Dateien."
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('unzip_') }
    }    
}

tasks.register ("sourcesJar", Jar) {
    dependsOn "classes"
    baseName project.archivesBaseName
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
tasks.register("javadocJar", Jar) {
    dependsOn "javadoc"
    baseName project.archivesBaseName
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId = group
            artifactId = project.archivesBaseName

            pom {
                name = "ilivalidator-custom-functions-geometries"
                url = "https://github.com/edigonzales/ilivalidator-custom-functions-geometries"
                description = "Geometries for IsInsideExternalDataset validator function."
                scm {
                    connection = "scm:git:https@github.com/edigonzales/ilivalidator-custom-functions-geometries"
                    developerConnection = "scm:git:https@github.com/edigonzales/ilivalidator-custom-functions-geometries"
                    url = "https://github.com/edigonzales/ilivalidator-custom-functions-geometries"
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://github.com/edigonzales/ilivalidator-custom-functions-geometries/blob/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "edigonzales"
                        name = "Stefan Ziegler"
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

nexusPublishing {
    repositories {
        sonatype { 
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
            password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
        }
    }
}

/*
plugins {
    id 'java-library'
}
*/

/*
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'
}
*/

/*
tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
*/